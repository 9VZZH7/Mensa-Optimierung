import numpy as np

import os
import sys
import inspect

currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
parentdir = os.path.dirname(currentdir)
sys.path.insert(0, parentdir)

from trafficSimulator import *

sim = Simulation()

n = 15

# Nodes
STAIRS_WEST = (-195, 210)

FOOD_ONE_WEST = (-150, 165)
FOOD_TWO_WEST = (-120, 135)
FOOD_THREE_WEST = (-30, 105)

INTERSECTION_ONE_TWO_WEST = (-150, 135)
INTERSECTION_ONE_THREE_WEST = (-150, 105)
INTERSECTION_TWO_THREE_WEST = (-120, 105)
INTERSECTION_ALL_WEST = (-90, 45)

END_WEST = (-90, 0)

STAIRS_EAST = (195, 210)

FOOD_ONE_EAST = (150, 165)
FOOD_TWO_EAST = (120, 135)
FOOD_THREE_EAST = (30, 105)

INTERSECTION_ONE_TWO_EAST = (150, 135)
INTERSECTION_ONE_THREE_EAST = (150, 105)
INTERSECTION_TWO_THREE_EAST = (120, 105)
INTERSECTION_ALL_EAST = (90, 45)

END_EAST = (90, 0)

CROSS_INTERSECTION = (0, 90)

# Roads
STAIRS_TO_ONE_WEST = (STAIRS_WEST, FOOD_ONE_WEST)
STAIRS_TO_ONE_TWO_INTERSECT_WEST = (STAIRS_WEST, INTERSECTION_ONE_TWO_WEST)
ONE_TWO_INTERSECT_TO_TWO_WEST = (INTERSECTION_ONE_TWO_WEST, FOOD_TWO_WEST)
STAIRS_TO_ONE_THREE_INTERSECT_WEST = (STAIRS_WEST, INTERSECTION_ONE_THREE_WEST)
ONE_THREE_INTERSECT_TO_TWO_THREE_INTERSECT_WEST = (INTERSECTION_ONE_THREE_WEST, INTERSECTION_TWO_THREE_WEST)
TWO_THREE_INTERSECT_TO_THREE_WEST = (INTERSECTION_TWO_THREE_WEST, FOOD_THREE_WEST)
ONE_TO_ONE_TWO_INTERSECT_WEST = (FOOD_ONE_WEST, INTERSECTION_ONE_TWO_WEST)
ONE_TWO_INTERSECT_TO_ONE_THREE_INTERSECT_WEST = (INTERSECTION_ONE_TWO_WEST, INTERSECTION_ONE_THREE_WEST)
ONE_THREE_INTERSECT_TO_ALL_WEST = (INTERSECTION_ONE_THREE_WEST, INTERSECTION_ALL_WEST)
TWO_TO_TWO_THREE_INTERSECT_WEST = (FOOD_TWO_WEST, INTERSECTION_TWO_THREE_WEST)
TWO_THREE_INTERSECT_TO_ALL_WEST = (INTERSECTION_TWO_THREE_WEST, INTERSECTION_ALL_WEST)
THREE_TO_ALL_WEST = (FOOD_THREE_WEST, INTERSECTION_ALL_WEST)
ALL_TO_END_WEST = (INTERSECTION_ALL_WEST, END_WEST)
THREE_WEST_TO_CROSS_INTERSECT = (FOOD_THREE_WEST, CROSS_INTERSECTION)
CROSS_INTERSECT_TO_ALL_EAST = (CROSS_INTERSECTION, INTERSECTION_ALL_EAST)

STAIRS_TO_ONE_EAST = (STAIRS_EAST, FOOD_ONE_EAST)
STAIRS_TO_ONE_TWO_INTERSECT_EAST = (STAIRS_EAST, INTERSECTION_ONE_TWO_EAST)
ONE_TWO_INTERSECT_TO_TWO_EAST = (INTERSECTION_ONE_TWO_EAST, FOOD_TWO_EAST)
STAIRS_TO_ONE_THREE_INTERSECT_EAST = (STAIRS_EAST, INTERSECTION_ONE_THREE_EAST)
ONE_THREE_INTERSECT_TO_TWO_THREE_INTERSECT_EAST = (INTERSECTION_ONE_THREE_EAST, INTERSECTION_TWO_THREE_EAST)
TWO_THREE_INTERSECT_TO_THREE_EAST = (INTERSECTION_TWO_THREE_EAST, FOOD_THREE_EAST)
ONE_TO_ONE_TWO_INTERSECT_EAST = (FOOD_ONE_EAST, INTERSECTION_ONE_TWO_EAST)
ONE_TWO_INTERSECT_TO_ONE_THREE_INTERSECT_EAST = (INTERSECTION_ONE_TWO_EAST, INTERSECTION_ONE_THREE_EAST)
ONE_THREE_INTERSECT_TO_ALL_EAST = (INTERSECTION_ONE_THREE_EAST, INTERSECTION_ALL_EAST)
TWO_TO_TWO_THREE_INTERSECT_EAST = (FOOD_TWO_EAST, INTERSECTION_TWO_THREE_EAST)
TWO_THREE_INTERSECT_TO_ALL_EAST = (INTERSECTION_TWO_THREE_EAST, INTERSECTION_ALL_EAST)
THREE_TO_ALL_EAST = (FOOD_THREE_EAST, INTERSECTION_ALL_EAST)
ALL_TO_END_EAST = (INTERSECTION_ALL_EAST, END_EAST)
THREE_EAST_TO_CROSS_INTERSECT = (FOOD_THREE_EAST, CROSS_INTERSECTION)
CROSS_INTERSECT_TO_ALL_WEST = (CROSS_INTERSECTION, INTERSECTION_ALL_WEST)


sim.create_roads([
    STAIRS_TO_ONE_WEST,
    STAIRS_TO_ONE_TWO_INTERSECT_WEST,
    ONE_TWO_INTERSECT_TO_TWO_WEST,
    STAIRS_TO_ONE_THREE_INTERSECT_WEST,
    ONE_THREE_INTERSECT_TO_TWO_THREE_INTERSECT_WEST,
    TWO_THREE_INTERSECT_TO_THREE_WEST,
    ONE_TO_ONE_TWO_INTERSECT_WEST,
    ONE_TWO_INTERSECT_TO_ONE_THREE_INTERSECT_WEST,
    ONE_THREE_INTERSECT_TO_ALL_WEST,
    TWO_TO_TWO_THREE_INTERSECT_WEST,
    TWO_THREE_INTERSECT_TO_ALL_WEST,
    THREE_TO_ALL_WEST,
    ALL_TO_END_WEST,
    THREE_WEST_TO_CROSS_INTERSECT,
    CROSS_INTERSECT_TO_ALL_EAST,
    STAIRS_TO_ONE_EAST,
    STAIRS_TO_ONE_TWO_INTERSECT_EAST,
    ONE_TWO_INTERSECT_TO_TWO_EAST,
    STAIRS_TO_ONE_THREE_INTERSECT_EAST,
    ONE_THREE_INTERSECT_TO_TWO_THREE_INTERSECT_EAST,
    TWO_THREE_INTERSECT_TO_THREE_EAST,
    ONE_TO_ONE_TWO_INTERSECT_EAST,
    ONE_TWO_INTERSECT_TO_ONE_THREE_INTERSECT_EAST,
    ONE_THREE_INTERSECT_TO_ALL_EAST,
    TWO_TO_TWO_THREE_INTERSECT_EAST,
    TWO_THREE_INTERSECT_TO_ALL_EAST,
    THREE_TO_ALL_EAST,
    ALL_TO_END_EAST,
    THREE_EAST_TO_CROSS_INTERSECT,
    CROSS_INTERSECT_TO_ALL_WEST
])

def road(a): return range(a, a+n)

sim.create_gen({
    'vehicle_rate': 3,
    'vehicles': [
        [4, {'path': [0, 6, 7, 8, 12]}],
        [4, {'path': [1, 2, 9, 10, 12]}],
        [4, {'path': [3, 4, 5, 11, 12]}],
        [1, {'path': [3, 4, 5, 13, 14, 27]}],
        [1, {'path': [15, 21, 22, 23, 27]}],
        [1, {'path': [16, 17, 24, 25, 27]}],
        [1, {'path': [18, 19, 20, 26, 27]}],
        [1, {'path': [18, 19, 20, 28, 29, 12]}],
    ]
})

# Start simulation
win = Window(sim)
win.zoom = 2
win.run(steps_per_update=5)